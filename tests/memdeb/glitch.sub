spin_nc()
{
  NC_PORT=`${PYINT} -c "from random import random;m=10000;print(m+int(random()*(65536-m)))"`
#  (nc -k -l 127.0.0.1 ${NC_PORT} > glitch1.ncout)&
#  (strace -o glitch1.nctrace -f ${RTPP_NOTYFY_CLIENT} -s tcp:127.0.0.1:${NC_PORT} -o glitch1.ncout -t 600 2>glitch1.nclog 1>glitch1.nclog)&
  NC_PID="`${RTPP_NOTYFY_CLIENT} -D -s tcp:127.0.0.1:${NC_PORT} -o glitch1.ncout -t 600 -l glitch1.nclog`"
  RTPP_NC_RC=${?}
  if [ -z "${NC_PID}" ]
  then
    RTPP_NC_RC=1
  fi
  report_rc "${RTPP_NC_RC}" "starting NOTYFY_CLIENT on port ${NC_PORT}"
}

stop_nc()
{
  notify_client_stop "${NC_PID}"
}

glitch_collect()
{
  test="${1}"
  filter="${2}"
  nretry="${3:-0}"

  spin_nc

  if RTPP_GLITCH_ACT="r" RTPP_GLITCH_TRIG="*" RTPP_GLITCH_CH_PORT="${NC_PORT}" ./${test} >/dev/null
  then
    stop_nc
  else
    stop_nc
    if [ ${nretry} -gt 0 ]
    then
      nretry=$((${nretry} - 1))
      glitch_collect "${test}" "${filter}" "${nretry}"
      return "${?}"
    fi
    echo "glitch data cannot be collected"
    return 1
  fi
  echo "Collected glitch data, $((`wc -l < glitch1.ncout`)) total points"
  if [ ! -z "${filter}" ]
  then
    grep -e "${filter}" glitch1.ncout > glitch1.ncout.flt
    mv glitch1.ncout.flt glitch1.ncout
    echo "                   ....$((`wc -l < glitch1.ncout`)) selected points"
  fi
  echo "                   ....$((`awk '{print $2}' glitch1.ncout | sort -u | wc -l`)) unique points"
  GPS="`awk '{print $2}' glitch1.ncout | sort -u`"
  for gp in ${GPS}
  do
    glline_c="`grep -w ${gp} glitch1.ncout | awk '{print $7}' | sort -u | wc -l`"
    if [ ${glline_c} -gt 1 ]
    then
      echo "${gp} collision detected, $((${glline_c})) hits:"
      grep -w ${gp} glitch1.ncout | awk '{print "    "$2" "$7}' | sort -u
      return 1
    fi
  done
}

glitch_do()
{
  test="${1}"
  nok_expected="${2}"
  rlog="${3}"

  nfail=0
  nok=0

  GPS="`awk '{print $7" "$2}' glitch1.ncout  | sort -u | awk '{print $2}'`"
  for gp in ${GPS}
  do
    glline="`grep -w ${gp} glitch1.ncout | awk '{print $7}' | uniq`"
    tp="${gp}:*"
    if RTPP_GLITCH_ACT="g" RTPP_GLITCH_TRIG="${tp}" ./${test} 2>/dev/null >/dev/null
    then
       nok=$((${nok} + 1))
       res="OK"
    else
       res="FAIL"
       nfail=$((${nfail} + 1))
    fi
    if [ ! -z ${rlog} ]
    then
      if grep -q "MEMDEB(.*): errors found: " "${rlog}"
      then
         res="${res} (LEAKS!)"
      fi
      if grep -q "^Died on signal" "${rlog}"
      then
         res="CRASH"
      fi
    fi
    printf "%-24s test %s at ${glline}\n" "${tp}:" "${res}"
    if [ "${res}" = "CRASH" ]
    then
      grep -B 5 -A 5 "^Died on signal" "${rlog}"
      return 1
    fi
  done
  echo "${nok} times OK, ${nfail} times FAIL"
  if [ ${nok} -gt ${nok_expected} ]
  then
    echo "Test went OK ${nok} times vs expected ${nok_expected}"
    return 1
  fi
  return 0
}

glitch_test() {
  if [ ! -z "${5}" ]
  then
    nretry="${5}"
  else
    nretry=0
  fi
  glitch_collect "${1}" "${4}" "${nretry}"
  report "Collecting glitch data for \"${1}\""
  glitch_do "${1}" "${2}" "${3}"
  return ${?}
}
